"use strict";

var http = require('follow-redirects').http,
    https = require('follow-redirects').https,
    ul = require("ul"),
    url = require("url"),
    queryString = require("querystring"),
    events = require("events"),
    EventEmitter = events.EventEmitter;

/**
 * tinyreq
 * Creates http(s) requests.
 *
 * @name tinyreq
 * @function
 * @param {String|Object} options A string being the request url or an object containing the following fields:
 *
 *  - `url` (String): The request url.
 *  - `method` (String): The request method.
 *  - `data` (Object): The request POST data.
 *  - `encoding` (String): The encoding type.
 *
 * @param {Function} callback The callback function called (with `error` and `data` parameters).
 * @return {EventEmitter} An event emitter you can use for listening for the `data`, `error` and `end` events.
 */
module.exports = function tinyreq(options, callback) {

    // Handle options as string
    if (typeof options === "string") {
        options = {
            url: options
        };
    }

    var parsedurl = url.parse(options.url),
        defaults = ul.clone(parsedurl),
        request = null,
        _done = false,
        body = "";

    // Merge options
    options = ul.deepMerge(options, defaults, {
        method: options.method ? options.method : options.data ? "POST" : "GET",
        headers: {}
    });

    // Unique callback
    var opt_callback = function opt_callback(err, data, res) {
        if (_done) {
            return;
        }
        _done = true;
        if (typeof callback !== "function") {
            return;
        }
        callback(err, data, res);
    };

    // Handle post data
    if (options.data && options.data.constructor === Object) {
        options.data = queryString.stringify(options.data);
    }

    if (typeof options.data === "string") {
        options.headers["Content-Length"] = Buffer.byteLength(options.data);
    }

    var str = new EventEmitter();

    // Create the request
    request = (options.protocol === "http:" ? http : https).request(options, function (res) {
        res.setEncoding("utf8");
        body = "";

        if (typeof callback === "function") {
            res.on("data", function (data) {
                body += data.toString();
            });
        }

        res.on("data", function (data) {
            str.emit("data", data);
        }).on("error", function (e) {
            str.emit("error", e);
            opt_callback(e, null, res);
        }).on("end", function () {
            str.emit("end");
            opt_callback(null, body, res);
        });
    }).on("error", function (e) {
        opt_callback(e, null, null);
    });

    // Handle post data
    if (options.data) {
        request.write(options.data, options.encoding);
    }

    request.end();
    return str;
};